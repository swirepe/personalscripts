syntax on
set shiftwidth=4 softtabstop=4

" 2019-3-15 installing Vundle for YouCompleteMe
" https://github.com/VundleVim/Vundle.vim#about
" https://github.com/Valloric/YouCompleteMe
filetype off "required for vundle.  we turn it back on further down.
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" this is a github repo
Plugin 'Valloric/YouCompleteMe'
Plugin 'fatih/vim-go'
Plugin 'tarebecker/vim-yaml-formatter'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
" set ruler                     " show the line number on the bar
set more                      " use more prompt
set autoread                  " watch for file changes
" set number                    " line numbers
set hidden
set noautowrite               " don't automagically write on :next
set lazyredraw                " don't redraw when don't have to
set showmode
set showcmd
set nocompatible              " vim, not vi
set autoindent smartindent    " auto/smart indent
set smarttab                  " tab and backspace are smart
set tabstop=2                 " 2 spaces
set shiftwidth=2
set showmatch                 " set show matching parenthesis
set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set history=200
set backspace=indent,eol,start
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion
set ttyfast                   " we have a fast terminal
set noerrorbells              " No error bells please
set shell=bash
set fileformats=unix
set ff=unix
filetype on                   " Enable filetype detection
filetype indent on            " Enable filetype-specific indenting
filetype plugin on            " Enable filetype-specific plugins
set wildmode=longest:full
set wildmenu                  " menu has tab completion
let maplocalleader=','        " all my macros start with ,
set pastetoggle=<F2>          " press f2 to paste a large amount of text without the indents going nuts

"  searching
set incsearch                 " incremental search
set ignorecase                " search ignoring case
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set diffopt=filler,iwhite     " ignore all whitespace and sync
set ignorecase                " ignore case when searching
set smartcase                 " ignore case if search pattern is all lowercase,
                              "    case-sensitive otherwise
"  backup
set backup
set backupdir=~/.vim_backup
set viminfo=%100,'100,/100,h,\"500,:100,n~/.viminfo
"set viminfo='100,f1

" spelling
if v:version >= 700
  " Enable spell check for text files
  autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

" mappings
" toggle list mode
nmap <LocalLeader>tl :set list!<cr>
" toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>


" automatically cd into the directory the file is in
set autochdir

set statusline=%F%m%r%h%w\ [TYPE=%Y\ %{&ff}]\
\ [%l/%L\ (%p%%)
filetype plugin indent on
au FileType py set autoindent
au FileType py set smartindent
au FileType py set textwidth=79 " PEP-8 Friendly
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


highlight Search guibg='LightBlue' guifg='NONE'
 " press f4 to highlight matches
noremap <F4> :set hlsearch! hlsearch?<CR> 
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" cron
au FileType crontab set nobackup nowritebackup

" reload this when i save
autocmd! bufwritepost .vimrc source %

" quicksave
noremap <C-Z> :update<CR>

" new tab
noremap <C-T> :tabnew<CR>

" easier moving of code blockes
vnoremap < <gv
vnoremap > >gv

" tab navigation
" next tab as shift tab (note: ctrl tab seems to ntow work
map <S-Tab> :tabnext<cr>
" split navigation with ctrl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" splits
set splitbelow
set splitright


" http://vim.wikia.com/wiki/Moving_lines_up_or_down
" alt-j move line down
" alt-k move line up
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv


" 2019-3-08
" https://stackoverflow.com/questions/53664/how-to-effectively-work-with-multiple-files-in-vim
" :tabe new tab <F6>
" :tabn next tab <F8>
" :tabp prev tabl <F7>
nnoremap <F5> :tabe<cr>
nnoremap <F8> :tabn<cr>
nnoremap <F7> :tabp<cr>

" jk to go back to normal mode
imap jk <Esc>
