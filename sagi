#!/usr/bin/env bash
# sudo apt-get update ; sudo apt-get install

CURRDIR=$(pwd)
AUTOREMOVE=1

USE_COLORS=1
COLOR_off='\033[0m'
COLOR_BBlue='\033[1;34m'

function say {
  if [[ "$USE_COLORS" == 1 ]]
	then
		echo -e "${COLOR_BBlue}[sagi] $@ ${COLOR_off}"
	else
		echo "$@"
	fi
}

function update_machines {
    
    if [[ -z "$PERS_DIR" ]]
    then
        PERS_DIR="$HOME/pers"
    fi
    
    if [[ -d $PERS_DIR/machines      ]] &&
       [[ -d $PERS_DIR/machines/.git ]]
    then
      say "Updating machines repository."
      cd $PERS_DIR/machines
      git pull --no-edit origin master
    else
      say "No machines repository found.  Cloning."
      git clone git@bitbucket.org:swirepe/machines.git $PERS_DIR/machines
    fi
    
    
    SAGIRECORD_DIR="$PERS_DIR/machines/apt/$(hostname)"
    
    
    
    if [ ! -d $SAGIRECORD_DIR ]
    then
        say "$SAGIRECORD_DIR does not exist: creating."
        mkdir -p $SAGIRECORD_DIR
fi

}

if [[ "$AUTOREMOVE" == 1 ]]
then
	say "Autoremoving."
	sudo apt-get autoremove -y
fi

say "Updating"
sudo apt-get update


NON_ARG_PACKAGE="false"
for package in $@
do
    if [[ "$package" == "-"* ]]
    then
        packages+=($package)
    elif ! dpkg -s $package &> /dev/null
    then
        packages+=($package)
        NON_ARG_PACKAGE="true"
    else
        echo "Warning: Package already installed: $package" >/dev/stderr
    fi        
done


if [ ${#packages[@]} = 0 ]
then
    say "Nothing to install. Exiting."
    exit 0
elif [[ $NON_ARG_PACKAGE == "false" ]]
then
    say "Only arguments remaining: ${packages[@]}"
    say "Exiting."
    exit 0
else
    say "Installing packages: ${packages[@]}"
fi

# TODO should this be "apt list" instead of "dpgk --get-selections"?
sudo apt-get install -y ${packages[@]} && ( 
    update_machines &&
    cd "$SAGIRECORD_DIR" &&
    dpkg --get-selections > aptlist.txt &&
    git add aptlist.txt &&
    grep -h ^deb /etc/apt/sources.list /etc/apt/sources.list.d/* > repos.txt &&
    git add repos.txt &&
    git commit -m "sagi $(hostname) $*" &&
    git push origin master
)
        
cd "$CURRDIR"
    
